{"version":3,"sources":["components/TodoForm.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","state","name","isComplete","handleChange","bind","event","this","setState","target","value","className","onSubmit","addTodo","htmlFor","type","id","onChange","Component","TodoItem","style","textDecoration","todo","onClick","editTodo","deleteTodo","TodoList","todos","map","key","Fragment","App","fetch","then","response","json","data","catch","error","console","log","preventDefault","csrftoken","Cookies","get","method","headers","body","JSON","stringify","index","findIndex","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a7856dbe.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n\nclass TodoForm extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      name: '',\n      isComplete: false,\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n  handleChange(event){\n  this.setState({[event.target.name]: event.target.value});\n  }\n  render(){\n    return(\n      <form className=\"col-12 col-md-6 mb-5\" onSubmit={(event) => this.props.addTodo(event, this.state)}>\n        <div className=\"form-group\">\n          <label htmlFor=\"name\">Todos</label>\n          <input type='text' className=\"form-control\" id=\"name\" name=\"name\" value={this.state.name} onChange={this.handleChange}/>\n        </div>\n        <button type=\"submit\" className=\"btn btn-primary\">Add Todo</button>\n      </form>\n    )\n  }\n}\n\nexport default TodoForm;\n","import React from 'react';\n\nfunction TodoItem(props){\n  // console.log(props.todo.isComplete);\n  return(\n    <ul className=\"list-group mb-3 col-12\">\n     <li className=\"list-group-item\" style={{textDecoration: props.todo.isComplete ? \"line-through\" : \"\"}}>\n       <div className=\"d-flex\">\n         <input onClick={() => props.editTodo(props.todo.name, props.todo.id)}type=\"checkbox\" id=\"name\"/>\n         <h5>{props.todo.name}</h5>\n       </div>\n        <button className=\"btn btn-danger\"onClick={() => props.deleteTodo(props.todo.id)} type=\"button\">Delete</button>\n     </li>\n   </ul>\n  )\n\n}\n\n\n\n\nfunction TodoList(props){\n  const todos = props.todos.map(todo => <TodoItem key={todo.id} todo={todo} deleteTodo={props.deleteTodo} editTodo={props.editTodo}/>);\n  return(\n    <React.Fragment>\n      <div>\n        {todos}\n      </div>\n    </React.Fragment>\n  )\n}\nexport default TodoList;\n","import React, { Component } from 'react';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport Cookies from 'js-cookie';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      todos: []\n    }\n    this.addTodo = this.addTodo.bind(this)\n    this.deleteTodo = this.deleteTodo.bind(this)\n    this.editTodo = this.editTodo.bind(this)\n  }\n  componentDidMount(){\n    fetch('api/v1/')\n    .then(response => response.json())\n    .then(data => this.setState({todos: data}))\n    .catch(error => console.log('Error:', error));\n  }\n\n  addTodo(event, data){\n    event.preventDefault();\n    const csrftoken = Cookies.get('csrftoken');\n    fetch('api/v1/', {\n      method: 'POST',\n      headers: {\n        'X-CSRFToken': csrftoken,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data),\n    })\n  .then(response => response.json())\n  .then(data => {\n    const todos = [...this.state.todos, data];\n    this.setState({todos})\n  })\n  }\n  deleteTodo(id){\n    fetch(`api/v1/${id}`, {\n      method: 'DELETE',\n    })\n  .then(response => response)\n  .then(data => {\n    const todos = [...this.state.todos]\n    console.log('todos', todos)\n    const index = todos.findIndex(todo => todo.id === id)\n    todos.splice(index,1);\n    this.setState({todos})\n  })\n  .catch(error => console.log(\"Error:\", error));\n  }\n\n  editTodo(data, id){\n    fetch(`api/v1/${id}/`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data,\n        isComplete: true,\n      })\n    })\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n      const todos = [...this.state.todos];\n      const index = todos.findIndex(todo => todo.id === id);\n      todos[index] = data;\n      this.setState({todos})\n\n    })\n    .catch(error => console.log('Error:', error));\n  }\n\n  render(){\n    return(\n      <div>\n        <TodoForm addTodo={this.addTodo}/>\n        <TodoList todos={this.state.todos} deleteTodo={this.deleteTodo} editTodo={this.editTodo}/>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}